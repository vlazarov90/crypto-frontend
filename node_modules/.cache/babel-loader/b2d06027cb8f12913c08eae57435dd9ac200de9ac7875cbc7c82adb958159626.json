{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nconst MAX_REDIRECTS = 100;\n/** @private */\nexport class HttpConnection {\n  constructor(url, options = {}) {\n    this._stopPromiseResolver = () => {};\n    this.features = {};\n    this._negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this._logger = createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    let webSocketModule = null;\n    let eventSourceModule = null;\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n    this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\n    this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  async start(transferFormat) {\n    transferFormat = transferFormat || TransferFormat.Binary;\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\n    if (this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */) {\n      return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n    }\n    this._connectionState = \"Connecting\" /* ConnectionState.Connecting */;\n    this._startInternalPromise = this._startInternal(transferFormat);\n    await this._startInternalPromise;\n    // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"Failed to start the HttpConnection before stop() was called.\";\n      this._logger.log(LogLevel.Error, message);\n      // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n      await this._stopPromise;\n      return Promise.reject(new AbortError(message));\n    } else if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n      this._logger.log(LogLevel.Error, message);\n      return Promise.reject(new AbortError(message));\n    }\n    this._connectionStarted = true;\n  }\n  send(data) {\n    if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\n      return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n    }\n    if (!this._sendQueue) {\n      this._sendQueue = new TransportSendQueue(this.transport);\n    }\n    // Transport will not be null if state is connected\n    return this._sendQueue.send(data);\n  }\n  async stop(error) {\n    if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n      return Promise.resolve();\n    }\n    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n      return this._stopPromise;\n    }\n    this._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */;\n    this._stopPromise = new Promise(resolve => {\n      // Don't complete stop() until stopConnection() completes.\n      this._stopPromiseResolver = resolve;\n    });\n    // stopInternal should never throw so just observe it.\n    await this._stopInternal(error);\n    await this._stopPromise;\n  }\n  async _stopInternal(error) {\n    // Set error as soon as possible otherwise there is a race between\n    // the transport closing and providing an error and the error from a close message\n    // We would prefer the close message error.\n    this._stopError = error;\n    try {\n      await this._startInternalPromise;\n    } catch (e) {\n      // This exception is returned to the user as a rejected Promise from the start method.\n    }\n    // The transport's onclose will trigger stopConnection which will run our onclose event.\n    // The transport should always be set if currently connected. If it wasn't set, it's likely because\n    // stop was called during start() and start() failed.\n    if (this.transport) {\n      try {\n        await this.transport.stop();\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n        this._stopConnection();\n      }\n      this.transport = undefined;\n    } else {\n      this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n    }\n  }\n  async _startInternal(transferFormat) {\n    // Store the original base url and the access token factory since they may change\n    // as part of negotiating\n    let url = this.baseUrl;\n    this._accessTokenFactory = this._options.accessTokenFactory;\n    this._httpClient._accessTokenFactory = this._accessTokenFactory;\n    try {\n      if (this._options.skipNegotiation) {\n        if (this._options.transport === HttpTransportType.WebSockets) {\n          // No need to add a connection ID in this case\n          this.transport = this._constructTransport(HttpTransportType.WebSockets);\n          // We should just call connect directly in this case.\n          // No fallback or negotiate in this case.\n          await this._startTransport(url, transferFormat);\n        } else {\n          throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n        }\n      } else {\n        let negotiateResponse = null;\n        let redirects = 0;\n        do {\n          negotiateResponse = await this._getNegotiationResponse(url);\n          // the user tries to stop the connection when it is being started\n          if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ || this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n            throw new AbortError(\"The connection was stopped during negotiation.\");\n          }\n          if (negotiateResponse.error) {\n            throw new Error(negotiateResponse.error);\n          }\n          if (negotiateResponse.ProtocolVersion) {\n            throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n          }\n          if (negotiateResponse.url) {\n            url = negotiateResponse.url;\n          }\n          if (negotiateResponse.accessToken) {\n            // Replace the current access token factory with one that uses\n            // the returned access token\n            const accessToken = negotiateResponse.accessToken;\n            this._accessTokenFactory = () => accessToken;\n            // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\n            this._httpClient._accessToken = accessToken;\n            this._httpClient._accessTokenFactory = undefined;\n          }\n          redirects++;\n        } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n        if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n          throw new Error(\"Negotiate redirection limit exceeded.\");\n        }\n        await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\n      }\n      if (this.transport instanceof LongPollingTransport) {\n        this.features.inherentKeepAlive = true;\n      }\n      if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\n        // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n        // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n        this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n        this._connectionState = \"Connected\" /* ConnectionState.Connected */;\n      }\n      // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n      // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n      // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n    } catch (e) {\n      this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\n      this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n      this.transport = undefined;\n      // if start fails, any active calls to stop assume that start will complete the stop promise\n      this._stopPromiseResolver();\n      return Promise.reject(e);\n    }\n  }\n  async _getNegotiationResponse(url) {\n    const headers = {};\n    const [name, value] = getUserAgentHeader();\n    headers[name] = value;\n    const negotiateUrl = this._resolveNegotiateUrl(url);\n    this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n    try {\n      const response = await this._httpClient.post(negotiateUrl, {\n        content: \"\",\n        headers: {\n          ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      });\n      if (response.statusCode !== 200) {\n        return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n      }\n      const negotiateResponse = JSON.parse(response.content);\n      if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n        // Negotiate version 0 doesn't use connectionToken\n        // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n        negotiateResponse.connectionToken = negotiateResponse.connectionId;\n      }\n      if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\n        return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\n      }\n      return negotiateResponse;\n    } catch (e) {\n      let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n      if (e instanceof HttpError) {\n        if (e.statusCode === 404) {\n          errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n        }\n      }\n      this._logger.log(LogLevel.Error, errorMessage);\n      return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\n    }\n  }\n  _createConnectUrl(url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n  }\n  async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\n    if (this._isITransport(requestedTransport)) {\n      this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n      this.transport = requestedTransport;\n      await this._startTransport(connectUrl, requestedTransferFormat);\n      this.connectionId = negotiateResponse.connectionId;\n      return;\n    }\n    const transportExceptions = [];\n    const transports = negotiateResponse.availableTransports || [];\n    let negotiate = negotiateResponse;\n    for (const endpoint of transports) {\n      const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\n      if (transportOrError instanceof Error) {\n        // Store the error and continue, we don't want to cause a re-negotiate in these cases\n        transportExceptions.push(`${endpoint.transport} failed:`);\n        transportExceptions.push(transportOrError);\n      } else if (this._isITransport(transportOrError)) {\n        this.transport = transportOrError;\n        if (!negotiate) {\n          try {\n            negotiate = await this._getNegotiationResponse(url);\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n          connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\n        }\n        try {\n          await this._startTransport(connectUrl, requestedTransferFormat);\n          this.connectionId = negotiate.connectionId;\n          return;\n        } catch (ex) {\n          this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n          negotiate = undefined;\n          transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\n          if (this._connectionState !== \"Connecting\" /* ConnectionState.Connecting */) {\n            const message = \"Failed to select transport before stop() was called.\";\n            this._logger.log(LogLevel.Debug, message);\n            return Promise.reject(new AbortError(message));\n          }\n        }\n      }\n    }\n    if (transportExceptions.length > 0) {\n      return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n    }\n    return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n  }\n  _constructTransport(transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this._options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n        return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n      case HttpTransportType.ServerSentEvents:\n        if (!this._options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n        return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this._httpClient, this._logger, this._options);\n      default:\n        throw new Error(`Unknown transport: ${transport}.`);\n    }\n  }\n  _startTransport(url, transferFormat) {\n    this.transport.onreceive = this.onreceive;\n    if (this.features.reconnect) {\n      this.transport.onclose = async e => {\n        let callStop = false;\n        if (this.features.reconnect) {\n          try {\n            this.features.disconnected();\n            await this.transport.connect(url, transferFormat);\n            await this.features.resend();\n          } catch {\n            callStop = true;\n          }\n        } else {\n          this._stopConnection(e);\n          return;\n        }\n        if (callStop) {\n          this._stopConnection(e);\n        }\n      };\n    } else {\n      this.transport.onclose = e => this._stopConnection(e);\n    }\n    return this.transport.connect(url, transferFormat);\n  }\n  _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\n    const transport = HttpTransportType[endpoint.transport];\n    if (transport === null || transport === undefined) {\n      this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n      return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        const transferFormats = endpoint.transferFormats.map(s => TransferFormat[s]);\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this._options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n            this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\n            return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\n          } else {\n            this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\n            try {\n              this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\n              return this._constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\n          return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\n        }\n      } else {\n        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\n        return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\n      }\n    }\n  }\n  _isITransport(transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  }\n  _stopConnection(error) {\n    this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n    this.transport = undefined;\n    // If we have a stopError, it takes precedence over the error from the transport\n    error = this._stopError || error;\n    this._stopError = undefined;\n    if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n      return;\n    }\n    if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\n      this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n      throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n    }\n    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n      // A call to stop() induced this call to stopConnection and needs to be completed.\n      // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n      this._stopPromiseResolver();\n    }\n    if (error) {\n      this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n    if (this._sendQueue) {\n      this._sendQueue.stop().catch(e => {\n        this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n      });\n      this._sendQueue = undefined;\n    }\n    this.connectionId = undefined;\n    this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n    if (this._connectionStarted) {\n      this._connectionStarted = false;\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n      }\n    }\n  }\n  _resolveUrl(url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n    if (!Platform.isBrowser) {\n      throw new Error(`Cannot resolve '${url}'.`);\n    }\n    // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n    const aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n    this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n    return aTag.href;\n  }\n  _resolveNegotiateUrl(url) {\n    const negotiateUrl = new URL(url);\n    if (negotiateUrl.pathname.endsWith('/')) {\n      negotiateUrl.pathname += \"negotiate\";\n    } else {\n      negotiateUrl.pathname += \"/negotiate\";\n    }\n    const searchParams = new URLSearchParams(negotiateUrl.searchParams);\n    if (!searchParams.has(\"negotiateVersion\")) {\n      searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\n    }\n    if (searchParams.has(\"useStatefulReconnect\")) {\n      if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\n        this._options._useStatefulReconnect = true;\n      }\n    } else if (this._options._useStatefulReconnect === true) {\n      searchParams.append(\"useStatefulReconnect\", \"true\");\n    }\n    negotiateUrl.search = searchParams.toString();\n    return negotiateUrl.toString();\n  }\n}\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\nexport class TransportSendQueue {\n  constructor(_transport) {\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n  send(data) {\n    this._bufferData(data);\n    if (!this._transportResult) {\n      this._transportResult = new PromiseSource();\n    }\n    return this._transportResult.promise;\n  }\n  stop() {\n    this._executing = false;\n    this._sendBufferedData.resolve();\n    return this._sendLoopPromise;\n  }\n  _bufferData(data) {\n    if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n      throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n    }\n    this._buffer.push(data);\n    this._sendBufferedData.resolve();\n  }\n  async _sendLoop() {\n    while (true) {\n      await this._sendBufferedData.promise;\n      if (!this._executing) {\n        if (this._transportResult) {\n          this._transportResult.reject(\"Connection stopped.\");\n        }\n        break;\n      }\n      this._sendBufferedData = new PromiseSource();\n      const transportResult = this._transportResult;\n      this._transportResult = undefined;\n      const data = typeof this._buffer[0] === \"string\" ? this._buffer.join(\"\") : TransportSendQueue._concatBuffers(this._buffer);\n      this._buffer.length = 0;\n      try {\n        await this._transport.send(data);\n        transportResult.resolve();\n      } catch (error) {\n        transportResult.reject(error);\n      }\n    }\n  }\n  static _concatBuffers(arrayBuffers) {\n    const totalLength = arrayBuffers.map(b => b.byteLength).reduce((a, b) => a + b);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const item of arrayBuffers) {\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n    return result.buffer;\n  }\n}\nclass PromiseSource {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\n  }\n  resolve() {\n    this._resolver();\n  }\n  reject(reason) {\n    this._rejecter(reason);\n  }\n}","map":{"version":3,"names":["AccessTokenHttpClient","DefaultHttpClient","AggregateErrors","DisabledTransportError","FailedToNegotiateWithServerError","FailedToStartTransportError","HttpError","UnsupportedTransportError","AbortError","LogLevel","HttpTransportType","TransferFormat","LongPollingTransport","ServerSentEventsTransport","Arg","createLogger","getUserAgentHeader","Platform","WebSocketTransport","MAX_REDIRECTS","HttpConnection","constructor","url","options","_stopPromiseResolver","features","_negotiateVersion","isRequired","_logger","logger","baseUrl","_resolveUrl","logMessageContent","undefined","withCredentials","Error","timeout","webSocketModule","eventSourceModule","isNode","require","requireFunc","__webpack_require__","__non_webpack_require__","WebSocket","EventSource","_httpClient","httpClient","accessTokenFactory","_connectionState","_connectionStarted","_options","onreceive","onclose","start","transferFormat","Binary","isIn","log","Debug","Promise","reject","_startInternalPromise","_startInternal","message","_stopPromise","send","data","_sendQueue","TransportSendQueue","transport","stop","error","resolve","_stopInternal","_stopError","e","_stopConnection","_accessTokenFactory","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_accessToken","_createTransport","inherentKeepAlive","headers","name","value","negotiateUrl","_resolveNegotiateUrl","response","post","content","statusCode","JSON","parse","negotiateVersion","connectionToken","connectionId","useStatefulReconnect","_useStatefulReconnect","errorMessage","_createConnectUrl","indexOf","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ex","length","join","ServerSentEvents","LongPolling","reconnect","callStop","disconnected","connect","resend","transportMatches","transferFormats","map","s","Warning","Information","catch","lastIndexOf","isBrowser","aTag","window","document","createElement","href","URL","pathname","endsWith","searchParams","URLSearchParams","has","append","toString","get","search","actualTransport","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","byteLength","reduce","a","result","Uint8Array","offset","item","set","buffer","_resolver","_rejecter","reason"],"sources":["../../src/HttpConnection.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n    useStatefulReconnect?: boolean;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: AccessTokenHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new AbortError(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n\r\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\r\n                return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\r\n            }\r\n\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat,\r\n                negotiate?.useStatefulReconnect === true);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!,\r\n                    this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        if (this.features.reconnect) {\r\n            this.transport!.onclose = async (e) => {\r\n                let callStop = false;\r\n                if (this.features.reconnect) {\r\n                    try {\r\n                        this.features.disconnected();\r\n                        await this.transport!.connect(url, transferFormat);\r\n                        await this.features.resend();\r\n                    } catch {\r\n                        callStop = true;\r\n                    }\r\n                } else {\r\n                    this._stopConnection(e);\r\n                    return;\r\n                }\r\n\r\n                if (callStop) {\r\n                    this._stopConnection(e);\r\n                }\r\n            };\r\n        } else {\r\n            this.transport!.onclose = (e) => this._stopConnection(e);\r\n        }\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined,\r\n        requestedTransferFormat: TransferFormat, useStatefulReconnect: boolean): ITransport | Error | unknown {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const negotiateUrl = new URL(url);\r\n\r\n        if (negotiateUrl.pathname.endsWith('/')) {\r\n            negotiateUrl.pathname += \"negotiate\";\r\n        } else {\r\n            negotiateUrl.pathname += \"/negotiate\";\r\n        }\r\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\r\n\r\n        if (!searchParams.has(\"negotiateVersion\")) {\r\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\r\n        }\r\n\r\n        if (searchParams.has(\"useStatefulReconnect\")) {\r\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\r\n                this._options._useStatefulReconnect = true;\r\n            }\r\n        } else if (this._options._useStatefulReconnect === true) {\r\n            searchParams.append(\"useStatefulReconnect\", \"true\");\r\n        }\r\n\r\n        negotiateUrl.search = searchParams.toString();\r\n\r\n        return negotiateUrl.toString();\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}