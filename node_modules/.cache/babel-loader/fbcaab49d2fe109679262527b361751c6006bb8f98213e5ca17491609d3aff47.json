{"ast":null,"code":"import signalrService from \"@/services/signalrService\";\nimport PriceChart from './PriceChart.vue';\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  components: {\n    PriceChart\n  },\n  data() {\n    return {\n      price: null,\n      previousPrice: null,\n      lastPriceDirection: ''\n    };\n  },\n  computed: {\n    ...mapGetters(['historicalData']),\n    priceDirection() {\n      if (this.previousPrice === null) return '';\n\n      // Check the current price against the previous price\n      if (this.price > this.previousPrice) {\n        return 'text-success'; // Price increased\n      } else if (this.price < this.previousPrice) {\n        return 'text-danger'; // Price decreased\n      }\n\n      // If the price hasn't changed, return the last direction\n      return this.lastPriceDirection;\n    }\n  },\n  watch: {\n    // Watch for changes in price\n    price(newPrice) {\n      if (this.previousPrice !== null) {\n        // Update lastPriceDirection based on the new price\n        if (newPrice > this.previousPrice) {\n          this.lastPriceDirection = 'text-success';\n        } else if (newPrice < this.previousPrice) {\n          this.lastPriceDirection = 'text-danger';\n        }\n      }\n\n      // Update previousPrice to the new price\n      this.previousPrice = newPrice;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchHistoricalData'])\n  },\n  mounted() {\n    this.fetchHistoricalData();\n    signalrService.start().then(() => {\n      signalrService.on(\"ReceivePriceUpdate\", price => {\n        this.previousPrice = this.price;\n        this.price = JSON.parse(price).bpi.USD.rate;\n      });\n    }).catch(err => console.error(\"SignalR connection failed: \", err));\n  }\n};","map":{"version":3,"names":["signalrService","PriceChart","mapActions","mapGetters","components","data","price","previousPrice","lastPriceDirection","computed","priceDirection","watch","newPrice","methods","mounted","fetchHistoricalData","start","then","on","JSON","parse","bpi","USD","rate","catch","err","console","error"],"sources":["/Users/veselinlazarov/projects/CryptoDashboard/crypto-dashboard-frontend/src/components/CryptoPrice.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <div class=\"text-center mb-4\">\n      <h1>Real-time Bitcoin Prices</h1>\n      <p class=\"current-price\" :class=\"priceDirection\">\n        Current Price: {{ price ? `$${price}` : 'Loading...' }}\n      </p>\n    </div>\n    <PriceChart v-if=\"historicalData !== null\" />\n  </div>\n</template>\n\n<script>\nimport signalrService from \"@/services/signalrService\";\nimport PriceChart from './PriceChart.vue';\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n  components: { PriceChart },\n  data() {\n    return {\n      price: null,\n      previousPrice: null,\n      lastPriceDirection: '',\n    };\n  },\n  computed: {\n    ...mapGetters(['historicalData',]),\n    priceDirection() {\n      if (this.previousPrice === null) return '';\n\n      // Check the current price against the previous price\n      if (this.price > this.previousPrice) {\n        return 'text-success'; // Price increased\n      } else if (this.price < this.previousPrice) {\n        return 'text-danger'; // Price decreased\n      }\n\n      // If the price hasn't changed, return the last direction\n      return this.lastPriceDirection;\n    }\n  },\n  watch: {\n    // Watch for changes in price\n    price(newPrice) {\n      if (this.previousPrice !== null) {\n        // Update lastPriceDirection based on the new price\n        if (newPrice > this.previousPrice) {\n          this.lastPriceDirection = 'text-success';\n        } else if (newPrice < this.previousPrice) {\n          this.lastPriceDirection = 'text-danger';\n        }\n      }\n\n      // Update previousPrice to the new price\n      this.previousPrice = newPrice;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchHistoricalData'])\n  },\n  mounted() {\n    this.fetchHistoricalData();\n    signalrService.start()\n      .then(() => {\n        signalrService.on(\"ReceivePriceUpdate\", (price) => {\n          this.previousPrice = this.price;\n          this.price = JSON.parse(price).bpi.USD.rate;\n        });\n      })\n      .catch(err => console.error(\"SignalR connection failed: \", err));\n  }\n};\n</script>\n\n<style scoped>\n.current-price {\n  font-size: 1.5rem;\n  font-weight: bold;\n}\n.text-success { color: green; }\n.text-danger { color: red; }\n</style>"],"mappings":"AAaA,OAAOA,cAAa,MAAO,2BAA2B;AACtD,OAAOC,UAAS,MAAO,kBAAkB;AACzC,SAASC,UAAU,EAAEC,UAAS,QAAS,MAAM;AAE7C,eAAe;EACbC,UAAU,EAAE;IAAEH;EAAW,CAAC;EAC1BI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,IAAI;MACXC,aAAa,EAAE,IAAI;MACnBC,kBAAkB,EAAE;IACtB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGN,UAAU,CAAC,CAAC,gBAAgB,CAAE,CAAC;IAClCO,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACH,aAAY,KAAM,IAAI,EAAE,OAAO,EAAE;;MAE1C;MACA,IAAI,IAAI,CAACD,KAAI,GAAI,IAAI,CAACC,aAAa,EAAE;QACnC,OAAO,cAAc,EAAE;MACzB,OAAO,IAAI,IAAI,CAACD,KAAI,GAAI,IAAI,CAACC,aAAa,EAAE;QAC1C,OAAO,aAAa,EAAE;MACxB;;MAEA;MACA,OAAO,IAAI,CAACC,kBAAkB;IAChC;EACF,CAAC;EACDG,KAAK,EAAE;IACL;IACAL,KAAKA,CAACM,QAAQ,EAAE;MACd,IAAI,IAAI,CAACL,aAAY,KAAM,IAAI,EAAE;QAC/B;QACA,IAAIK,QAAO,GAAI,IAAI,CAACL,aAAa,EAAE;UACjC,IAAI,CAACC,kBAAiB,GAAI,cAAc;QAC1C,OAAO,IAAII,QAAO,GAAI,IAAI,CAACL,aAAa,EAAE;UACxC,IAAI,CAACC,kBAAiB,GAAI,aAAa;QACzC;MACF;;MAEA;MACA,IAAI,CAACD,aAAY,GAAIK,QAAQ;IAC/B;EACF,CAAC;EACDC,OAAO,EAAE;IACP,GAAGX,UAAU,CAAC,CAAC,qBAAqB,CAAC;EACvC,CAAC;EACDY,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC1Bf,cAAc,CAACgB,KAAK,CAAC,EAClBC,IAAI,CAAC,MAAM;MACVjB,cAAc,CAACkB,EAAE,CAAC,oBAAoB,EAAGZ,KAAK,IAAK;QACjD,IAAI,CAACC,aAAY,GAAI,IAAI,CAACD,KAAK;QAC/B,IAAI,CAACA,KAAI,GAAIa,IAAI,CAACC,KAAK,CAACd,KAAK,CAAC,CAACe,GAAG,CAACC,GAAG,CAACC,IAAI;MAC7C,CAAC,CAAC;IACJ,CAAC,EACAC,KAAK,CAACC,GAAE,IAAKC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC,CAAC;EACpE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}