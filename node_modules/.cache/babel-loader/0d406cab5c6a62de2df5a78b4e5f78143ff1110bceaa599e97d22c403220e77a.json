{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_LineChart, {\n    data: $options.chartData,\n    chartOptions: $data.chartOptions\n  }, null, 8, [\"data\", \"chartOptions\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_LineChart","data","$options","chartData","chartOptions","$data"],"sources":["/Users/veselinlazarov/projects/CryptoDashboard/crypto-dashboard-frontend/src/components/PriceChart.vue"],"sourcesContent":["<template>\n    <div>\n      <LineChart :data=\"chartData\" :chartOptions=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { Line } from 'vue-chartjs'\n  import { mapGetters } from 'vuex'\n  import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    TimeScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend\n  } from 'chart.js';\n  \n  // Register the required scales and components\n  ChartJS.register(CategoryScale, LinearScale, TimeScale, PointElement, LineElement, Filler, Tooltip, Legend);\n  \n  export default {\n    components: {\n      LineChart: Line,\n    },\n    computed: {\n      ...mapGetters(['historicalData']),\n      chartData() {\n        if (!this.historicalData || !this.historicalData.bpi) {\n          return {\n            labels: [],\n            datasets: [\n              {\n                label: 'Bitcoin Price',\n                backgroundColor: '#42A5F5',\n                borderColor: '#1E88E5',\n                data: []\n              }\n            ]\n          };\n        }\n  \n        const bpiArray = Object.entries(this.historicalData.bpi).map(([date, price]) => ({ date, price }));\n  \n        return {\n          labels: bpiArray.map(entry => entry.date),\n          datasets: [\n            {\n              label: 'Bitcoin Price',\n              backgroundColor: '#42A5F5',\n              borderColor: '#1E88E5',\n              data: bpiArray.map(entry => entry.price)\n            }\n          ]\n        };\n      }\n    },\n    data() {\n      return {\n        chartOptions: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: 'time', // Ensure you're using 'time' for date values\n              time: {\n                unit: 'day' // Adjust as needed\n              }\n            },\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .chart-container {\n    position: relative;\n    height: 400px;\n  }\n  </style>"],"mappings":";;;uBACIA,mBAAA,CAEM,cADJC,YAAA,CAA4DC,oBAAA;IAAhDC,IAAI,EAAEC,QAAA,CAAAC,SAAS;IAAGC,YAAY,EAAEC,KAAA,CAAAD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}