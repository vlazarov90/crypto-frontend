{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nimport api from '../services/api';\n\n// Create and export the store\nexport default createStore({\n  state: {\n    historicalData: null,\n    token: localStorage.getItem('token') || null,\n    user: null,\n    // To store user information (optional)\n    registrationError: null // To store registration error messages\n  },\n  mutations: {\n    SET_HISTORICAL_DATA(state, data) {\n      state.historicalData = data; // Mutation to update historical data\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n      if (token) {\n        localStorage.setItem('token', token); // Save token to local storage\n      } else {\n        localStorage.removeItem('token'); // Remove token on logout\n      }\n    },\n    SET_USER(state, user) {\n      state.user = user; // Set user information\n    },\n    SET_REGISTRATION_ERROR(state, error) {\n      state.registrationError = error; // Set registration error\n    }\n  },\n  actions: {\n    async fetchHistoricalData({\n      commit\n    }) {\n      try {\n        const response = await api.get('/crypto/history');\n        commit('SET_HISTORICAL_DATA', response.data); // Commit the data to the store\n      } catch (error) {\n        console.error('Error fetching historical data:', error);\n      }\n    },\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await api.post('/auth/login', credentials);\n        const token = response.data.token;\n        commit('SET_TOKEN', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set default header for authorization\n      } catch (error) {\n        console.error('Login error:', error);\n      }\n    },\n    async register({\n      commit\n    }, userData) {\n      try {\n        const response = await api.post('/auth/register', userData);\n        const token = response.data.token; // Assuming the token is returned\n        commit('SET_TOKEN', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set default header for authorization\n        commit('SET_USER', response.data.user); // Store user info if needed\n      } catch (error) {\n        console.error('Registration error:', error);\n        commit('SET_REGISTRATION_ERROR', error.response.data.message || 'Registration failed'); // Set registration error message\n      }\n    },\n    logout({\n      commit\n    }) {\n      commit('SET_TOKEN', null);\n      delete axios.defaults.headers.common['Authorization']; // Remove the token from headers\n    }\n  },\n  getters: {\n    historicalData: state => state.historicalData,\n    isAuthenticated: state => !!state.token,\n    // Check if the user is authenticated\n    token: state => state.token,\n    registrationError: state => state.registrationError // Getter for registration error\n  }\n});","map":{"version":3,"names":["createStore","axios","api","state","historicalData","token","localStorage","getItem","user","registrationError","mutations","SET_HISTORICAL_DATA","data","SET_TOKEN","setItem","removeItem","SET_USER","SET_REGISTRATION_ERROR","error","actions","fetchHistoricalData","commit","response","get","console","login","credentials","post","defaults","headers","common","register","userData","message","logout","getters","isAuthenticated"],"sources":["/Users/veselinlazarov/projects/CryptoDashboard/crypto-dashboard-frontend/src/store/store.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport axios from 'axios';\nimport api from '../services/api'\n\n// Create and export the store\nexport default createStore({\n  state: {\n    historicalData: null,\n    token: localStorage.getItem('token') || null,\n    user: null, // To store user information (optional)\n    registrationError: null, // To store registration error messages\n  },\n  mutations: {\n    SET_HISTORICAL_DATA(state, data) {\n      state.historicalData = data; // Mutation to update historical data\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n      if (token) {\n        localStorage.setItem('token', token); // Save token to local storage\n      } else {\n        localStorage.removeItem('token'); // Remove token on logout\n      }\n    },\n    SET_USER(state, user) {\n      state.user = user; // Set user information\n    },\n    SET_REGISTRATION_ERROR(state, error) {\n      state.registrationError = error; // Set registration error\n    },\n  },\n  actions: {\n    async fetchHistoricalData({ commit }) {\n      try {\n        const response = await api.get('/crypto/history');\n        commit('SET_HISTORICAL_DATA', response.data); // Commit the data to the store\n      } catch (error) {\n        console.error('Error fetching historical data:', error);\n      }\n    },\n    async login({ commit }, credentials) {\n      try {\n        const response = await api.post('/auth/login', credentials);\n        const token = response.data.token;\n        commit('SET_TOKEN', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set default header for authorization\n      } catch (error) {\n        console.error('Login error:', error);\n      }\n    },\n    async register({ commit }, userData) {\n      try {\n        const response = await api.post('/auth/register', userData);\n        const token = response.data.token; // Assuming the token is returned\n        commit('SET_TOKEN', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set default header for authorization\n        commit('SET_USER', response.data.user); // Store user info if needed\n      } catch (error) {\n        console.error('Registration error:', error);\n        commit('SET_REGISTRATION_ERROR', error.response.data.message || 'Registration failed'); // Set registration error message\n      }\n    },\n    logout({ commit }) {\n      commit('SET_TOKEN', null);\n      delete axios.defaults.headers.common['Authorization']; // Remove the token from headers\n    },\n  },\n  getters: {\n    historicalData: (state) => state.historicalData,\n    isAuthenticated: (state) => !!state.token, // Check if the user is authenticated\n    token: (state) => state.token,\n    registrationError: (state) => state.registrationError, // Getter for registration error\n  },\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}