{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport store from '../store/store';\nimport Login from '../views/Login.vue';\nimport Register from '../views/Register.vue';\nimport Home from '../views/Home.vue';\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: Login\n}, {\n  path: '/register',\n  name: 'Register',\n  component: Register\n}, {\n  path: '/',\n  name: 'Home',\n  component: Home,\n  meta: {\n    requiresAuth: true\n  } // Protect this route\n}\n// Other protected routes can be added here\n];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// Global navigation guard to enforce authentication\nrouter.beforeEach((to, from, next) => {\n  if (to.meta.requiresAuth && !store.getters.isAuthenticated) {\n    // If the user is not authenticated, redirect to login\n    next({\n      name: 'Login'\n    });\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","Login","Register","Home","routes","path","name","component","meta","requiresAuth","router","history","beforeEach","to","from","next","getters","isAuthenticated"],"sources":["/Users/veselinlazarov/projects/CryptoDashboard/crypto-dashboard-frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport store from '../store/store';\nimport Login from '../views/Login.vue';\nimport Register from '../views/Register.vue';\nimport Home from '../views/Home.vue';\n\nconst routes = [\n  { path: '/login', name: 'Login', component: Login },\n  { path: '/register', name: 'Register', component: Register },\n  {\n    path: '/',\n    name: 'Home',\n    component: Home,\n    meta: { requiresAuth: true } // Protect this route\n  },\n  // Other protected routes can be added here\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\n// Global navigation guard to enforce authentication\nrouter.beforeEach((to, from, next) => {\n  if (to.meta.requiresAuth && !store.getters.isAuthenticated) {\n    // If the user is not authenticated, redirect to login\n    next({ name: 'Login' });\n  } else {\n    next();\n  }\n});\n\nexport default router;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,IAAI,MAAM,mBAAmB;AAEpC,MAAMC,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE,OAAO;EAAEC,SAAS,EAAEN;AAAM,CAAC,EACnD;EAAEI,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAEL;AAAS,CAAC,EAC5D;EACEG,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEJ,IAAI;EACfK,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B;AACA;AAAA,CACD;AAED,MAAMC,MAAM,GAAGZ,YAAY,CAAC;EAC1Ba,OAAO,EAAEZ,gBAAgB,CAAC,CAAC;EAC3BK;AACF,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,IAAIF,EAAE,CAACL,IAAI,CAACC,YAAY,IAAI,CAACT,KAAK,CAACgB,OAAO,CAACC,eAAe,EAAE;IAC1D;IACAF,IAAI,CAAC;MAAET,IAAI,EAAE;IAAQ,CAAC,CAAC;EACzB,CAAC,MAAM;IACLS,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}